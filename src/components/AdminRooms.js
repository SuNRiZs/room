import React, { useEffect, useState } from 'react';
import { fetchRooms, createRoom, updateRoom, deleteRoom } from '../services/api';
import '../AdminStyles.css';

const AdminRooms = () => {
  const [rooms, setRooms] = useState([]);
  const [editingRoom, setEditingRoom] = useState(null);
  const [formData, setFormData] = useState({
    server: '',
    login: '',
    password: '',
    domain: '',
    display_name: '',
    connector_type: 'exchange'
  });

  useEffect(() => {
    async function loadRooms() {
      try {
        const data = await fetchRooms();
        setRooms(data);
      } catch (err) {
        console.error(err);
      }
    }
    loadRooms();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingRoom) {
        await updateRoom(editingRoom.id, formData);
      } else {
        await createRoom(formData);
      }
      const data = await fetchRooms();
      setRooms(data);
      setEditingRoom(null);
      setFormData({
        server: '',
        login: '',
        password: '',
        domain: '',
        display_name: '',
        connector_type: 'exchange'
      });
    } catch (err) {
      console.error(err);
    }
  };

  const handleEdit = (room) => {
    setEditingRoom(room);
    setFormData({
      server: room.server || '',
      login: room.login || '',
      password: '',
      domain: room.domain || '',
      display_name: room.display_name || '',
      connector_type: room.connector_type || 'exchange'
    });
  };

  const handleDelete = async (roomId) => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É?')) {
      try {
        await deleteRoom(roomId);
        const data = await fetchRooms();
        setRooms(data);
      } catch (err) {
        console.error(err);
      }
    }
  };

  return (
    <div className="admin-rooms">
      <h2>–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–∫</h2>
      <table className="admin-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
            <th>–°–µ—Ä–≤–µ—Ä</th>
            <th>–î–æ–º–µ–Ω</th>
            <th>–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {rooms.map(room => (
            <tr key={room.id}>
              <td>{room.id}</td>
              <td>{room.display_name}</td>
              <td>{room.server}</td>
              <td>{room.domain}</td>
              <td>{room.connector_type}</td>
              <td>
                <button onClick={() => handleEdit(room)}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onClick={() => handleDelete(room.id)}>üóë –£–¥–∞–ª–∏—Ç—å</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <form className="admin-form" onSubmit={handleSubmit}>
        <h3>{editingRoom ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É' : '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É'}</h3>
        
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
        <input type="text" value={formData.display_name} onChange={e => setFormData({ ...formData, display_name: e.target.value })} required />

        <label>–°–µ—Ä–≤–µ—Ä:</label>
        <input type="text" value={formData.server} onChange={e => setFormData({ ...formData, server: e.target.value })} required />

        <label>–õ–æ–≥–∏–Ω:</label>
        <input type="text" value={formData.login} onChange={e => setFormData({ ...formData, login: e.target.value })} required />

        <label>–ü–∞—Ä–æ–ª—å:</label>
        <input type="password" value={formData.password} onChange={e => setFormData({ ...formData, password: e.target.value })} />

        <label>–î–æ–º–µ–Ω:</label>
        <input type="text" value={formData.domain} onChange={e => setFormData({ ...formData, domain: e.target.value })} />

        <label>–¢–∏–ø –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞:</label>
        <select value={formData.connector_type} onChange={e => setFormData({ ...formData, connector_type: e.target.value })}>
          <option value="exchange">Exchange</option>
          <option value="other">–î—Ä—É–≥–æ–π</option>
        </select>

        <button type="submit">{editingRoom ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}</button>
      </form>
    </div>
  );
};

export default AdminRooms;
