import React, { useEffect, useState } from 'react';
import { fetchAdminRooms, createRoom, updateRoom, deleteRoom } from '../services/api';
import '../AdminStyles.css';

const AdminRooms = () => {
  const [rooms, setRooms] = useState([]);
  const [editingRoom, setEditingRoom] = useState(null);
  const [formData, setFormData] = useState({
    server: '',
    login: '',
    password: '',
    domain: '',
    display_name: '',
    connector_type: 'exchange',
    polling_frequency: 30 // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω—É–∂–Ω–æ
  });

  useEffect(() => {
    async function loadRooms() {
      try {
        const data = await fetchAdminRooms(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç:', data); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        setRooms(data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', err);
      }
    }
    loadRooms();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingRoom) {
        await updateRoom(editingRoom.id, formData);
      } else {
        await createRoom(formData);
      }
      const data = await fetchAdminRooms();
      setRooms(data);
      setEditingRoom(null);
      setFormData({
        server: '',
        login: '',
        password: '',
        domain: '',
        display_name: '',
        connector_type: 'exchange',
        polling_frequency: 30
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
    }
  };

  const handleEdit = (room) => {
    setEditingRoom(room);
    setFormData({
      server: room.server || '',
      login: room.login || '',
      password: '', // –ü–∞—Ä–æ–ª—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      domain: room.domain || '',
      display_name: room.display_name || '',
      connector_type: room.connector_type || 'exchange',
      polling_frequency: room.polling_frequency || 30 // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ
    });
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è –∫–æ–º–Ω–∞—Ç–∞:', room); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  };

  const handleDelete = async (roomId) => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É?')) {
      try {
        await deleteRoom(roomId);
        const data = await fetchAdminRooms();
        setRooms(data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
      }
    }
  };

  return (
    <div className="admin-rooms admin-section">
      <h2 className="admin-heading">–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–∫</h2>
      <div className="rooms-table-container">
        <table className="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
              <th>–°–µ—Ä–≤–µ—Ä</th>
              <th>–õ–æ–≥–∏–Ω</th>
              <th>–î–æ–º–µ–Ω</th>
              <th>–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä</th>
              <th>–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {rooms.map(room => (
              <tr key={room.id}>
                <td>{room.id}</td>
                <td>{room.display_name}</td>
                <td>{room.server}</td>
                <td>{room.login || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>{room.domain || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>{room.connector_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>{room.polling_frequency || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>
                  <button className="admin-button edit-button" onClick={() => handleEdit(room)}>‚úèÔ∏è</button>
                  <button className="admin-button delete-button" onClick={() => handleDelete(room.id)}>üóë</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <form className="admin-form compact-form" onSubmit={handleSubmit}>
        <h3 className="admin-subheading">{editingRoom ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É' : '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É'}</h3>
        <div className="form-grid">
          <div className="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
            <input
              type="text"
              value={formData.display_name}
              onChange={e => setFormData({ ...formData, display_name: e.target.value })}
              required
            />
          </div>
          <div className="form-group">
            <label>–°–µ—Ä–≤–µ—Ä:</label>
            <input
              type="text"
              value={formData.server}
              onChange={e => setFormData({ ...formData, server: e.target.value })}
              required
            />
          </div>
          <div className="form-group">
            <label>–õ–æ–≥–∏–Ω:</label>
            <input
              type="text"
              value={formData.login}
              onChange={e => setFormData({ ...formData, login: e.target.value })}
              required
            />
          </div>
          <div className="form-group">
            <label>–ü–∞—Ä–æ–ª—å:</label>
            <input
              type="password"
              value={formData.password}
              onChange={e => setFormData({ ...formData, password: e.target.value })}
            />
          </div>
          <div className="form-group">
            <label>–î–æ–º–µ–Ω:</label>
            <input
              type="text"
              value={formData.domain}
              onChange={e => setFormData({ ...formData, domain: e.target.value })}
            />
          </div>
          <div className="form-group">
            <label>–¢–∏–ø –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞:</label>
            <select
              value={formData.connector_type}
              onChange={e => setFormData({ ...formData, connector_type: e.target.value })}
            >
              <option value="exchange">Exchange</option>
              <option value="other">–î—Ä—É–≥–æ–π</option>
            </select>
          </div>
          <div className="form-group">
            <label>–ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞ (–º–∏–Ω):</label>
            <input
              type="number"
              min="1"
              value={formData.polling_frequency}
              onChange={e => setFormData({ ...formData, polling_frequency: Number(e.target.value) })}
            />
          </div>
        </div>
        <button className="admin-button submit-button" type="submit">
          {editingRoom ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
        </button>
      </form>
    </div>
  );
};

export default AdminRooms;